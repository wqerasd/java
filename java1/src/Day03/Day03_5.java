package Day03;

public class Day03_5 { // c s
	
	public static void main(String[] args) { // m s
		
		// 반복문 : 1. for 2. while
		// for :
			// 어디서부터 어디까지 몇개씩 증가/감소 하면서 반복처리
				// 1부터 10까지 1씩증가하면서 반복처리 => 10번 실행
				// 1부터 10까지 3씩증가하면서 반복처리 => 4번 실행
			// 1. 초기값 	2. 조건식  3. 증감식
			// 형태
			// 	for( 1. 초기값 ; 2. 조건식 ; 3. 증감식 ) {
			//		반복실행문;
		
		// for 중첩 :
			// for( ) { for2() { for3() { } } }
		
		// p.121 예제1
			for( int i = 1 ; i<=10 ; i++ ) { 
				// int i = 1   : 초기값 선언 [ i는 반복변수 ]
					// i <= 10 : 조건식 [ i가 10 이하이면 실행 아니면 실행불가 ]
						// i++ : 증감식 [ 실행문 실행후 증가 혹은 감소 단위 ]
				
				// * 변수 i는 1부터 10까지 1씩 증가하면서 실행문 반복처리
				
				System.out.print( i + " ");
					// i = 1 일때 i<=10 [ true ] 실행문실행 -> 증감식 i=2
					// i = 2 일때 i<=10 [ true ] 실행문실행 -> 증감식 i=3
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					// i = 10 일때 i<=10 [ true ] 실행문실행 -> 증감식 i=11
					// i = 11 일때 i<=10 [ false ] 반복문 종료
			}
			
		// p.122 예제2 : 1부터 100까지 누적합 출력
			int sum = 0; // 누적합을 저장할 변수
			for( int a = 1 ; a<=100 ; a++ ) {
				
				//* i는 1부터 100까지 1씩 증가하면서 실행문 반복처리
				sum += a;
				
			
				
			}
			
			System.out.println("\n 1~100까지 누적합 결과 : " + sum);
			
		// 예제3 : 1부터 100까지 7배수의 누적합계
			int sum2 = 0;
			for ( int i = 0 ; i<=100; i += 7) {
				// * i는 0부터 100까지 7씩 증가하면서 실행무 반복처리
				sum2 += i;
			}
			System.out.println(" 1~100까지 7배수 누적합 결과 :");
			
		// 예제4 : 2단 구구단 만들기 [ 2 = 상수 ,
			
			for( int 곱 = 1 ; 곱<=9 ; 곱++ ) {
				// * 곱은 1부터 9까지 1씩 증가하면 실행 반복처리
				System.out.println( "2 X " +곱+" = " + (2*곱) );
			}
			
			// for 중첩
			
			// p.124 : 2단~9단 구구단 만들기 [ 단 = 변수 , 곱 = 변수 ]
				// 단 : 2부터 9까지 1씩증가 -> 8번 실행
				// 곱 : 1부터 9까지 1씩증가 -> 9번 실행
					// 단 1번 실행 될때마다 곱 9번 실행
				// 구구단 총 실행 횟수 => 72번 실행
			for( int 단 = 2 ; 단<=9 ; 단 ++ ) {
				System.out.printf("-------%d단------- \n" , 단 );
				// for 중첩
				for( int 곱 = 1 ; 곱<=9 ; 곱++ ) {
					System.out.printf(" %d x %d = %d \n " , 단 , 곱 , (단*곱) );
				}
			}
			
			
			
				
	
	
	
	} // m e


} // c e
